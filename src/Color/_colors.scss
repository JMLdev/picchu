//------------------------------------
//              #COLORS
//------------------------------------


//Variables
$lightblue: #00BCF2;
$blue: #0078D7;
$midblue: #00188F;
$darkblue: #002050;
$lightpurple: #B4A0FF;
$purple: #5C2D91;
$darkpurple: #32145A;
$lightmagenta: #E3008C;
$magenta: #B4009E;
$darkmagenta: #5C005C;
$red: #E81123;
$darkred: #A80000;
$lightorange: #FF8C00;
$orange: #D83B01;
$lightyellow: #FFF100;
$yellow: #FFB900;
$lightgreen: #BAD80A;
$green: #107C10;
$darkgreen: #004B1C;
$lightteal: #00B294;
$teal: #008272;
$darkteal: #004B50;
$lightgray: #D2D2D2;
$midgray: #767676;
$darkgray: #505050;
$white: #FFFFFF;
$black: #000000;

$color-list: ("lightblue", $lightblue), ("blue", $blue), ("midblue", $midblue), ("darkblue", $darkblue),
("lightpurple", $lightpurple), ("purple", $purple), ("darkpurple", $darkpurple), ("lightmagenta", $lightmagenta),
("magenta", $magenta), ("darkmagenta", $darkmagenta), ("red", $red),
("darkred", $darkred), ("lightorange", $lightorange), ("orange", $orange),
("lightyellow", $lightyellow), ("yellow", $yellow), ("lightgreen", $lightgreen),
("green", $green), ("darkgreen", $darkgreen), ("lightteal", $lightteal), ("teal", $teal),
("darkteal", $darkteal), ("lightgray", $lightgray), ("midgray", $midgray), ("darkgray", $darkgray);
$shade-list: (30%, 60%, 90%);


//Functions
@function tint($color, $percentage) {
    @return mix(#FFFFFF, $color, $percentage);
}

@function shade($color, $percentage) {
    @return mix(#000000, $color, $percentage);
}


//Mixins
@mixin primary-color-ladder($color) {
    .primary-bgc {
        background-color: $color;
    }

    .primary-c {
        color: $color;
    }

    @for $i from 1 through 3 {
        .primary-d#{$i}-bgc {
            background-color: shade($color, nth($shade-list, $i));
        }
        .primary-l#{$i}-bgc {
            background-color: tint($color, nth($shade-list, $i));
        }

        .primary-d#{$i}-c {
            color: shade($color, nth($shade-list, $i));
        }
        .primary-l#{$i}-c {
            color: tint($color, nth($shade-list, $i));
        }
    }
}

@mixin secondary-color-ladder($color) {
    .secondary-bgc {
        background-color: $color;
    }

    .secondary-c {
        color: $color;
    }

    @for $i from 1 through 3 {
        .secondary-d#{$i}-bgc {
            background-color: shade($color, nth($shade-list, $i));
        }
        .secondary-l#{$i}-bgc {
            background-color: tint($color, nth($shade-list, $i));
        }

        .secondary-d#{$i}-c {
            color: shade($color, nth($shade-list, $i));
        }
        .secondary-l#{$i}-c {
            color: tint($color, nth($shade-list, $i));
        }
    }
}


//Output
.black-bgc {
    background-color: $black;
}

.black-c {
    color: $black;
}

.white-bgc {
    background-color: $white;
}

.white-c {
    color: $white;
}

@each $pair in $color-list {
    @for $i from 1 through 4 {
        @if $i == 4 {
            .#{nth($pair, 1)}-bgc {
                background-color: nth($pair, 2);
            }
            .#{nth($pair, 1)}-c {
                color: nth($pair, 2);
            }
        } 
        @else {
            .#{nth($pair, 1)}-d#{$i}-bgc {
                background-color: shade(nth($pair, 2), nth($shade-list, $i));
            }

            .#{nth($pair, 1)}-l#{$i}-bgc {
                background-color: tint(nth($pair, 2), nth($shade-list, $i));
            }

            .#{nth($pair, 1)}-d#{$i}-c {
                color: shade(nth($pair, 2), nth($shade-list, $i));
            }

            .#{nth($pair, 1)}-l#{$i}-c {
                color: tint(nth($pair, 2), nth($shade-list, $i));
            }
        }
    }
}